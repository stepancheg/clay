import printer.(println);
import strings.*;
import sequences.operators.*;

import test.*;


record Foo (
    a: Int,
    b: String
);

overload Foo() --> returned:Foo {
    returned <-- initializeRecord(Foo);
    returned.b = String("a should be 0");
}

overload Foo(a, b) = initializeRecord(Foo, 2*a, b ++ " times two");

testInitializeRecord(test) {
    var foo1 = Foo();
    expectEqual(test, "without params a", 0, foo1.a);
    expectEqual(test, "without params b", String("a should be 0"), foo1.b);

    var foo2 = Foo(5, String("a should be 5"));
    expectEqual(test, "with params a", 10, foo2.a);
    expectEqual(test, "with params b", String("a should be 5 times two"), foo2.b);
}


record ThrowsInConstructor ();

overload ThrowsInConstructor() --> returned:ThrowsInConstructor {
    throw Error(CStringRef());
}

record ThrowsInDestructor ();

overload destroy(that:ThrowsInDestructor) {
    println("destroy ThrowsInDestructor");
    throw Error(CStringRef());
}


var counter = 0;

record Counter (
);

overload Counter() --> returned:Counter {
    counter +: 1;
}

overload Counter(that:Counter) --> returned:Counter {
    counter +: 1;
}

overload destroy(that:Counter) {
    println("destroy Counter");
    counter -: 1;
}

record RecordWithCounterAndThrowsInConstructor (
    counter: Counter,
    throwsInConstructor: ThrowsInConstructor,
    counter2: Counter,
);

testRecordConstructorThrows(test) {
    counter = 0;
    try {
        RecordWithCounterAndThrowsInConstructor();
        expectTrue(test, "fail", false);
    } catch (e) {
        // expecting
    }
    expectEqual(test, "count", 0, counter);
}

record RecordWithCounterAndThrowsInDestructor (
    counter: Counter,
    //throwsInDestructor: ThrowsInDestructor,
    counter2: Counter,
);

testRecordDestructorThrows(test) {
    counter = 0;
    {
        RecordWithCounterAndThrowsInDestructor();
    }
    expectEqual(test, "count", 0, counter);
}


main() = testMain(
    TestSuite("records.initialization", array(
        TestCase("initializeRecord", testInitializeRecord),
        TestCase("record constructor throws", testRecordConstructorThrows),
        TestCase("record destructor throws", testRecordDestructorThrows),
    )));

